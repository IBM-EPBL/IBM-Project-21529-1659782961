# -*- coding: utf-8 -*-
"""Plant_Disease_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18kSEu3x5EZBCoJ-GlivkCHVBClEjEqRs
"""

import numpy as np
import cv2
import os
import matplotlib.pyplot as plt
import random
import pickle
from tensorflow.keras.callbacks import TensorBoard

DIRECTORY=r'/content/drive/MyDrive/tomatosample2'
CATEGORIES=['Bacterial_spot','Curl_Virus','Late_blight','Septoria_Spot','Target_Spot']

IMG_SIZE=100;
data=[]

for category in CATEGORIES:
    folder=os.path.join(DIRECTORY,category)
    label=CATEGORIES.index(category)
    for img in os.listdir(folder):
        img_path=os.path.join(folder,img)
        img_arr=cv2.imread(img_path)
        try:
           img_arr = cv2.resize(img_arr, (IMG_SIZE,IMG_SIZE))
           #print(img.shape)
        except:
           break
        #img_arr=cv2.resize(img_arr,(IMG_SIZE,IMG_SIZE))
        data.append([img_arr,label])

len(data)

X=[]
Y=[]

for features,labels in data:
    X.append(features)
    Y.append(labels)

X=np.array(X)
Y=np.array(Y)

X=X/255

X.shape

print(Y)

pickle.dump(data,open("dataset",'wb'))

from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Flatten,Dense

model=Sequential()

model.add( Conv2D(64,(3,3), activation='relu' ) )
model.add( MaxPooling2D( (2,2) ) )

model.add( Conv2D(64,(3,3), activation='relu' ) )
model.add( MaxPooling2D( (2,2) ) )

model.add( Conv2D(64,(3,3), activation='relu' ) )
model.add( MaxPooling2D( (2,2) ) )

model.add( Flatten() )

model.add( Dense(128,input_shape=X.shape[1:],activation='relu') )
model.add(Dense(10,activation='softmax'))

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(X,Y,epochs=10,validation_split=0.1)

history = model.fit(X,Y,epochs=2,validation_split=0.1)

print(history.history.keys())

# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model.summary()

model.save("my_model1")
#model.save("/content/drive/MyDrive/Models/models")

import tensorflow as tf
from tensorflow import keras
from google.colab.patches import cv2_imshow

import gradio as gr


#test_img = ''
#test_img_path = tf.keras.utils.get_file('Test Image', origin=test_img)
testimage = r'/content/drive/MyDrive/tomatosample2/Curl_Virus/013864a9-fc42-4357-8bfe-0d638ce2fc7f___YLCV_GCREC 2023.JPG'
img1 = cv2.imread(testimage)
plt.imshow(img1)


img = keras.preprocessing.image.load_img(
    testimage, target_size=(IMG_SIZE, IMG_SIZE)
)


img_array = keras.preprocessing.image.img_to_array(img)
img_array = tf.expand_dims(img_array, 0) # Create a batch

predictions = model.predict(img_array)

#print(predictions)
if(predictions[0][0]>0.8):
    print("TOMATO BACTERIAL_SPOT")

if(predictions[0][1]>0.8):
    print("TOMATO CURL VIRUS")

if(predictions[0][2]>0.8):
    print("TOMATO LATE BLIGHT")

if(predictions[0][3]>0.8):
    print("TOMATO SEPTORIA SPOT")

if(predictions[0][4]>0.8):
    print("TOMATO TARGET SPOT")

!pip install gradio

import tensorflow as tf
from tensorflow import keras
from google.colab.patches import cv2_imshow

import gradio as gr

def classify_image(img):
  img = keras.preprocessing.image.load_img(testimage, target_size=(IMG_SIZE, IMG_SIZE))


  img_array = keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0) # Create a batch

  predictions = model.predict(img_array)

  #print(predictions)
  if(predictions[0][0]>0.8):
    return("TOMATO BACTERIAL_SPOT")

  if(predictions[0][1]>0.8):
    return("TOMATO CURL VIRUS")

  if(predictions[0][2]>0.8):
    return("TOMATO LATE BLIGHT")

  if(predictions[0][3]>0.8):
    return("TOMATO SEPTORIA SPOT")

  if(predictions[0][4]>0.8):
    return("TOMATO TARGET SPOT")

image = gr.inputs.Image(shape=(299, 299))
#label = gr.outputs.Label(classify_image(image))

gr.Interface(fn=classify_image, inputs=image, outputs="text", capture_session=True).launch()

import tensorflow as tf
from tensorflow import keras
from google.colab.patches import cv2_imshow

#test_img = ''
#test_img_path = tf.keras.utils.get_file('Test Image', origin=test_img)
testimage = r'/content/drive/MyDrive/b1.JPG'

img = cv2.imread(testimage,0)
plt.imshow(img)
plt.xticks([]), plt.yticks([])  # to hide tick values on X and Y axis
plt.show()

img = keras.preprocessing.image.load_img(
    testimage, target_size=(IMG_SIZE, IMG_SIZE)
)

img_array = keras.preprocessing.image.img_to_array(img)
img_array = tf.expand_dims(img_array, 0) # Create a batch

predictions = model.predict(img_array)
#score = tf.nn.softmax(predictions[0])
predictions
print(predictions)
if(predictions[0][0]>0.8):
    print("TOMATO BACTERIAL_SPOT")

if(predictions[0][1]>0.8):
    print("TOMATO CURL VIRUS")

if(predictions[0][2]>0.8):
    print("TOMATO LATE BLIGHT")

if(predictions[0][3]>0.8):
    print("TOMATO SEPTORIA SPOT")

if(predictions[0][4]>0.8):
    print("TOMATO TARGET SPOT")

print(history.history.keys())